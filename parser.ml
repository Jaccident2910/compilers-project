type token =
  | IDENT of (Dict.ident)
  | MULOP of (Optree.op)
  | ADDOP of (Optree.op)
  | RELOP of (Optree.op)
  | NUMBER of (int)
  | CHAR of (char)
  | STRING of (Optree.symbol * int)
  | SEMI
  | DOT
  | COLON
  | LPAR
  | RPAR
  | COMMA
  | SUB
  | BUS
  | EQUAL
  | MINUS
  | ASSIGN
  | VBAR
  | ARROW
  | BADTOK
  | IMPOSSIBLE
  | ARRAY
  | BEGIN
  | CONST
  | DO
  | ELSE
  | END
  | IF
  | OF
  | PROC
  | RECORD
  | RETURN
  | THEN
  | TO
  | TYPE
  | LEN
  | VAR
  | WHILE
  | NOT
  | POINTER
  | NIL
  | REPEAT
  | UNTIL
  | FOR
  | ELSIF
  | CASE

open Parsing;;
let _ = parse_error;;
# 5 "parser.mly"
open Optree
open Dict
open Tree
# 31 "parser.mly"
let const n t = make_expr (Constant (n, t))
# 59 "parser.ml"
let yytransl_const = [|
  264 (* SEMI *);
  265 (* DOT *);
  266 (* COLON *);
  267 (* LPAR *);
  268 (* RPAR *);
  269 (* COMMA *);
  270 (* SUB *);
  271 (* BUS *);
  272 (* EQUAL *);
  273 (* MINUS *);
  274 (* ASSIGN *);
  275 (* VBAR *);
  276 (* ARROW *);
  277 (* BADTOK *);
  278 (* IMPOSSIBLE *);
  279 (* ARRAY *);
  280 (* BEGIN *);
  281 (* CONST *);
  282 (* DO *);
  283 (* ELSE *);
  284 (* END *);
  285 (* IF *);
  286 (* OF *);
  287 (* PROC *);
  288 (* RECORD *);
  289 (* RETURN *);
  290 (* THEN *);
  291 (* TO *);
  292 (* TYPE *);
  293 (* LEN *);
  294 (* VAR *);
  295 (* WHILE *);
  296 (* NOT *);
  297 (* POINTER *);
  298 (* NIL *);
  299 (* REPEAT *);
  300 (* UNTIL *);
  301 (* FOR *);
  302 (* ELSIF *);
  303 (* CASE *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* MULOP *);
  259 (* ADDOP *);
  260 (* RELOP *);
  261 (* NUMBER *);
  262 (* CHAR *);
  263 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\005\000\005\000\005\000\005\000\
\006\000\006\000\010\000\009\000\009\000\012\000\007\000\007\000\
\014\000\008\000\016\000\018\000\018\000\020\000\020\000\021\000\
\021\000\021\000\019\000\019\000\004\000\023\000\023\000\024\000\
\024\000\025\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\030\000\030\000\030\000\031\000\031\000\
\033\000\032\000\032\000\015\000\015\000\029\000\029\000\011\000\
\011\000\011\000\034\000\034\000\034\000\035\000\035\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\028\000\028\000\037\000\037\000\027\000\027\000\027\000\
\027\000\027\000\022\000\022\000\022\000\022\000\022\000\039\000\
\039\000\039\000\039\000\039\000\013\000\013\000\013\000\013\000\
\038\000\038\000\040\000\041\000\041\000\017\000\000\000"

let yylen = "\002\000\
\002\000\004\000\000\000\002\000\002\000\002\000\001\000\002\000\
\001\000\002\000\004\000\001\000\002\000\004\000\001\000\002\000\
\004\000\004\000\004\000\002\000\003\000\001\000\003\000\003\000\
\004\000\001\000\000\000\002\000\001\000\001\000\003\000\002\000\
\001\000\000\000\000\000\003\000\002\000\002\000\006\000\005\000\
\004\000\009\000\006\000\000\000\002\000\006\000\001\000\003\000\
\003\000\000\000\002\000\001\000\003\000\000\000\001\000\001\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\003\000\
\002\000\002\000\003\000\001\000\003\000\001\000\004\000\007\000\
\003\000\002\000\001\000\004\000\003\000\003\000\003\000\001\000\
\004\000\003\000\003\000\003\000\001\000\004\000\003\000\003\000\
\002\000\003\000\003\000\001\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\000\000\000\
\000\000\000\000\007\000\000\000\000\000\005\000\000\000\102\000\
\000\000\000\000\008\000\000\000\000\000\006\000\000\000\000\000\
\001\000\000\000\004\000\000\000\000\000\010\000\000\000\000\000\
\000\000\013\000\000\000\016\000\000\000\033\000\000\000\029\000\
\000\000\000\000\000\000\065\000\067\000\066\000\000\000\000\000\
\000\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\062\000\020\000\000\000\000\000\026\000\000\000\000\000\000\000\
\019\000\000\000\000\000\000\000\000\000\093\000\053\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\018\000\000\000\071\000\000\000\070\000\
\000\000\011\000\000\000\000\000\069\000\000\000\000\000\082\000\
\000\000\000\000\000\000\000\000\000\000\021\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\014\000\017\000\031\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\037\000\
\000\000\072\000\000\000\000\000\074\000\000\000\000\000\081\000\
\000\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
\083\000\024\000\023\000\000\000\000\000\095\000\000\000\097\000\
\000\000\000\000\000\000\088\000\096\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\000\000\079\000\025\000\
\000\000\000\000\000\000\000\000\094\000\099\000\098\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\000\000\085\000\000\000\086\000\087\000\
\090\000\000\000\091\000\092\000\000\000\034\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\089\000\
\045\000\000\000\039\000\000\000\049\000\051\000\043\000\048\000\
\080\000\000\000\000\000\000\000\000\000\000\000\042\000\046\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\039\000\010\000\014\000\022\000\011\000\
\019\000\015\000\126\000\020\000\069\000\023\000\106\000\012\000\
\053\000\032\000\065\000\062\000\063\000\138\000\040\000\041\000\
\042\000\082\000\054\000\093\000\115\000\191\000\177\000\196\000\
\178\000\055\000\056\000\057\000\127\000\107\000\149\000\108\000\
\144\000"

let yysindex = "\002\000\
\083\255\000\000\016\255\018\255\026\255\045\255\000\000\002\255\
\068\255\083\255\000\000\101\255\096\255\000\000\016\255\000\000\
\130\255\128\255\000\000\026\255\138\255\000\000\045\255\178\255\
\000\000\170\255\000\000\083\255\188\255\000\000\035\255\187\255\
\039\255\000\000\045\255\000\000\039\255\000\000\185\255\000\000\
\209\255\022\255\211\255\000\000\000\000\000\000\188\255\188\255\
\188\255\188\255\000\000\175\255\204\255\154\255\011\255\218\255\
\000\000\000\000\045\255\217\255\000\000\221\255\231\255\039\255\
\000\000\188\255\045\255\199\255\232\255\000\000\000\000\236\255\
\000\000\170\255\188\255\188\255\188\255\170\255\018\255\188\255\
\204\255\000\000\049\000\000\000\116\255\000\000\072\255\000\000\
\188\255\000\000\188\255\077\001\000\000\018\255\188\255\000\000\
\188\255\188\255\188\255\238\255\040\255\000\000\014\255\000\000\
\028\255\239\255\222\255\006\000\092\255\000\000\000\000\000\000\
\008\255\072\255\000\000\005\255\220\255\007\000\066\255\000\000\
\188\255\000\000\011\255\011\255\000\000\023\000\009\000\000\000\
\250\255\218\255\218\255\000\000\040\255\090\001\045\255\247\255\
\000\000\000\000\000\000\039\255\039\255\000\000\045\255\000\000\
\098\001\045\255\249\255\000\000\000\000\170\255\170\255\188\255\
\188\255\188\255\072\255\188\255\000\000\025\000\000\000\000\000\
\039\255\070\255\004\000\092\255\000\000\000\000\000\000\039\255\
\100\255\017\000\092\255\010\255\024\000\072\255\000\255\219\255\
\029\000\040\000\000\000\188\255\000\000\039\255\000\000\000\000\
\000\000\039\255\000\000\000\000\170\255\000\000\033\000\000\000\
\188\255\170\255\170\255\042\000\188\255\165\255\000\000\000\000\
\000\000\188\255\000\000\146\255\000\000\000\000\000\000\000\000\
\000\000\009\255\170\255\170\255\043\000\010\255\000\000\000\000"

let yyrindex = "\000\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\207\255\000\000\
\000\000\000\000\000\000\070\000\065\000\000\000\139\000\000\000\
\000\000\208\255\000\000\050\000\000\000\000\000\000\000\079\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\115\255\127\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\038\000\077\000\224\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\157\255\000\000\016\000\000\000\213\255\000\000\000\000\
\118\000\000\000\000\000\000\000\000\000\000\000\107\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\180\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\146\000\185\000\000\000\066\000\000\000\000\000\
\000\000\007\001\046\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\255\208\255\000\000\
\000\000\000\000\237\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\000\000\020\001\000\000\000\000\
\072\000\121\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\208\255\000\000\000\000\000\000\
\000\000\179\255\208\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\208\255\056\255\000\000\071\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\049\001\088\001\184\255\000\000\087\001\091\001\000\000\
\093\001\000\000\229\255\000\000\226\255\000\000\251\255\230\255\
\252\255\000\000\000\000\015\001\000\000\248\000\054\001\000\000\
\195\000\000\000\089\001\058\001\000\000\172\000\199\000\000\000\
\000\000\056\000\113\000\216\255\243\000\201\000\198\255\000\000\
\000\000"

let yytablesize = 652
let yytable = "\017\000\
\024\000\052\000\001\000\089\000\061\000\117\000\072\000\086\000\
\089\000\088\000\025\000\089\000\089\000\097\000\021\000\091\000\
\013\000\024\000\016\000\085\000\091\000\087\000\016\000\091\000\
\091\000\060\000\018\000\098\000\070\000\071\000\151\000\089\000\
\070\000\104\000\193\000\021\000\189\000\081\000\105\000\016\000\
\016\000\150\000\212\000\091\000\004\000\021\000\058\000\113\000\
\114\000\116\000\075\000\059\000\119\000\100\000\076\000\190\000\
\034\000\140\000\132\000\070\000\077\000\066\000\134\000\034\000\
\078\000\004\000\079\000\129\000\080\000\089\000\067\000\135\000\
\059\000\089\000\118\000\089\000\061\000\172\000\173\000\068\000\
\136\000\091\000\034\000\034\000\034\000\091\000\027\000\091\000\
\034\000\128\000\027\000\026\000\016\000\155\000\034\000\154\000\
\137\000\060\000\034\000\182\000\034\000\034\000\034\000\089\000\
\148\000\184\000\162\000\003\000\028\000\165\000\166\000\029\000\
\188\000\004\000\145\000\091\000\201\000\169\000\005\000\089\000\
\006\000\205\000\206\000\146\000\174\000\175\000\176\000\122\000\
\137\000\186\000\181\000\091\000\147\000\030\000\035\000\070\000\
\070\000\185\000\213\000\214\000\031\000\030\000\030\000\033\000\
\123\000\035\000\124\000\047\000\047\000\089\000\035\000\199\000\
\198\000\035\000\035\000\200\000\070\000\034\000\030\000\148\000\
\030\000\091\000\094\000\070\000\034\000\204\000\148\000\095\000\
\089\000\176\000\035\000\211\000\035\000\096\000\210\000\034\000\
\209\000\070\000\089\000\034\000\091\000\070\000\090\000\034\000\
\034\000\034\000\034\000\037\000\016\000\034\000\091\000\038\000\
\044\000\045\000\046\000\034\000\064\000\034\000\047\000\034\000\
\034\000\034\000\034\000\034\000\048\000\034\000\034\000\034\000\
\034\000\130\000\131\000\034\000\073\000\034\000\092\000\034\000\
\074\000\034\000\084\000\099\000\034\000\034\000\089\000\034\000\
\049\000\034\000\101\000\050\000\194\000\051\000\009\000\009\000\
\102\000\109\000\091\000\034\000\034\000\009\000\103\000\110\000\
\034\000\034\000\009\000\111\000\009\000\034\000\034\000\133\000\
\141\000\142\000\034\000\034\000\034\000\089\000\034\000\034\000\
\034\000\034\000\158\000\034\000\078\000\078\000\078\000\152\000\
\159\000\091\000\078\000\078\000\078\000\143\000\078\000\078\000\
\078\000\078\000\078\000\078\000\157\000\078\000\078\000\054\000\
\153\000\164\000\089\000\171\000\078\000\078\000\078\000\183\000\
\078\000\180\000\054\000\156\000\078\000\078\000\091\000\064\000\
\064\000\064\000\054\000\054\000\187\000\064\000\078\000\064\000\
\078\000\064\000\064\000\192\000\064\000\064\000\064\000\195\000\
\064\000\094\000\197\000\054\000\203\000\054\000\095\000\064\000\
\064\000\064\000\121\000\064\000\096\000\207\000\215\000\064\000\
\064\000\003\000\052\000\022\000\043\000\076\000\056\000\163\000\
\056\000\064\000\101\000\064\000\056\000\056\000\056\000\167\000\
\056\000\056\000\170\000\056\000\056\000\012\000\012\000\056\000\
\100\000\027\000\044\000\050\000\012\000\030\000\056\000\056\000\
\056\000\012\000\056\000\012\000\073\000\073\000\056\000\056\000\
\034\000\036\000\073\000\073\000\073\000\139\000\073\000\073\000\
\056\000\073\000\056\000\073\000\160\000\073\000\078\000\112\000\
\202\000\216\000\083\000\078\000\073\000\073\000\073\000\078\000\
\073\000\078\000\120\000\208\000\073\000\073\000\179\000\000\000\
\000\000\000\000\000\000\057\000\000\000\057\000\073\000\000\000\
\073\000\057\000\057\000\057\000\000\000\057\000\057\000\000\000\
\057\000\057\000\015\000\015\000\057\000\000\000\000\000\000\000\
\000\000\015\000\000\000\057\000\057\000\057\000\015\000\057\000\
\015\000\000\000\000\000\057\000\057\000\000\000\000\000\000\000\
\000\000\000\000\058\000\055\000\058\000\057\000\000\000\057\000\
\058\000\058\000\058\000\000\000\058\000\058\000\055\000\058\000\
\058\000\000\000\000\000\058\000\000\000\000\000\055\000\055\000\
\000\000\000\000\058\000\058\000\058\000\000\000\058\000\000\000\
\000\000\000\000\058\000\058\000\000\000\000\000\000\000\055\000\
\000\000\055\000\059\000\059\000\058\000\000\000\058\000\059\000\
\059\000\059\000\000\000\059\000\059\000\000\000\059\000\059\000\
\059\000\000\000\059\000\000\000\036\000\000\000\000\000\000\000\
\000\000\059\000\059\000\059\000\000\000\059\000\000\000\036\000\
\000\000\059\000\059\000\000\000\000\000\000\000\000\000\036\000\
\036\000\060\000\060\000\059\000\000\000\059\000\060\000\060\000\
\060\000\000\000\060\000\060\000\000\000\060\000\060\000\060\000\
\036\000\060\000\036\000\041\000\000\000\000\000\000\000\000\000\
\060\000\060\000\060\000\000\000\060\000\000\000\041\000\000\000\
\060\000\060\000\000\000\000\000\000\000\000\000\041\000\041\000\
\061\000\061\000\060\000\000\000\060\000\061\000\061\000\061\000\
\000\000\061\000\061\000\000\000\061\000\061\000\061\000\041\000\
\061\000\041\000\000\000\000\000\000\000\000\000\000\000\061\000\
\061\000\061\000\000\000\061\000\000\000\016\000\000\000\061\000\
\061\000\044\000\045\000\046\000\000\000\000\000\000\000\047\000\
\125\000\061\000\016\000\061\000\000\000\048\000\044\000\045\000\
\046\000\000\000\016\000\000\000\047\000\000\000\044\000\045\000\
\046\000\000\000\048\000\000\000\047\000\000\000\000\000\000\000\
\000\000\049\000\048\000\000\000\050\000\000\000\051\000\161\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\168\000\
\000\000\050\000\000\000\051\000\000\000\000\000\049\000\000\000\
\000\000\050\000\000\000\051\000"

let yycheck = "\004\000\
\006\000\029\000\001\000\004\001\031\000\078\000\037\000\048\000\
\004\001\050\000\009\001\004\001\004\001\003\001\001\001\016\001\
\001\001\023\000\001\001\047\000\016\001\049\000\001\001\016\001\
\016\001\031\000\001\001\017\001\033\000\035\000\026\001\004\001\
\037\000\064\000\035\001\001\001\027\001\042\000\066\000\001\001\
\001\001\034\001\034\001\016\001\031\001\001\001\012\001\075\000\
\076\000\077\000\029\001\038\001\080\000\059\000\033\001\046\001\
\001\001\030\001\099\000\064\000\039\001\023\001\023\001\008\001\
\043\001\031\001\045\001\095\000\047\001\004\001\032\001\032\001\
\038\001\004\001\079\000\004\001\103\000\150\000\151\000\041\001\
\041\001\016\001\027\001\028\001\029\001\016\001\008\001\016\001\
\033\001\094\000\012\001\024\001\001\001\121\000\039\001\030\001\
\101\000\103\000\043\001\030\001\045\001\046\001\047\001\004\001\
\109\000\164\000\134\000\025\001\008\001\140\000\141\000\016\001\
\171\000\031\001\023\001\016\001\189\000\145\000\036\001\004\001\
\038\001\194\000\195\000\032\001\152\000\153\000\154\000\012\001\
\133\000\030\001\161\000\016\001\041\001\019\001\008\001\140\000\
\141\000\168\000\211\000\212\000\011\001\027\001\028\001\016\001\
\089\000\019\001\091\000\027\001\028\001\004\001\013\001\182\000\
\180\000\027\001\028\001\186\000\161\000\001\001\044\001\164\000\
\046\001\016\001\009\001\168\000\008\001\193\000\171\000\014\001\
\004\001\197\000\044\001\026\001\046\001\020\001\202\000\019\001\
\012\001\182\000\004\001\001\001\016\001\186\000\008\001\027\001\
\028\001\029\001\008\001\010\001\001\001\033\001\016\001\022\001\
\005\001\006\001\007\001\039\001\010\001\019\001\011\001\043\001\
\044\001\045\001\046\001\047\001\017\001\027\001\028\001\029\001\
\001\001\097\000\098\000\033\001\028\001\001\001\011\001\008\001\
\008\001\039\001\008\001\002\001\008\001\043\001\004\001\045\001\
\037\001\047\001\010\001\040\001\010\001\042\001\024\001\025\001\
\012\001\035\001\016\001\028\001\029\001\031\001\008\001\008\001\
\033\001\029\001\036\001\008\001\038\001\033\001\039\001\010\001\
\010\001\028\001\043\001\039\001\045\001\004\001\047\001\043\001\
\044\001\045\001\009\001\047\001\002\001\003\001\004\001\044\001\
\015\001\016\001\008\001\009\001\010\001\008\001\012\001\013\001\
\014\001\015\001\016\001\017\001\012\001\019\001\020\001\008\001\
\018\001\035\001\004\001\035\001\026\001\027\001\028\001\028\001\
\030\001\009\001\019\001\013\001\034\001\035\001\016\001\002\001\
\003\001\004\001\027\001\028\001\028\001\008\001\044\001\010\001\
\046\001\012\001\013\001\028\001\015\001\016\001\017\001\027\001\
\019\001\009\001\019\001\044\001\028\001\046\001\014\001\026\001\
\027\001\028\001\018\001\030\001\020\001\028\001\028\001\034\001\
\035\001\024\001\010\001\012\001\028\000\012\001\002\001\135\000\
\004\001\044\001\028\001\046\001\008\001\009\001\010\001\143\000\
\012\001\013\001\146\000\015\001\016\001\024\001\025\001\019\001\
\028\001\010\000\028\001\028\001\031\001\015\000\026\001\027\001\
\028\001\036\001\030\001\038\001\002\001\003\001\034\001\035\001\
\020\000\023\000\008\001\009\001\010\001\103\000\012\001\013\001\
\044\001\015\001\046\001\017\001\133\000\019\001\009\001\074\000\
\190\000\214\000\042\000\014\001\026\001\027\001\028\001\018\001\
\030\001\020\001\081\000\197\000\034\001\035\001\156\000\255\255\
\255\255\255\255\255\255\002\001\255\255\004\001\044\001\255\255\
\046\001\008\001\009\001\010\001\255\255\012\001\013\001\255\255\
\015\001\016\001\024\001\025\001\019\001\255\255\255\255\255\255\
\255\255\031\001\255\255\026\001\027\001\028\001\036\001\030\001\
\038\001\255\255\255\255\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\002\001\008\001\004\001\044\001\255\255\046\001\
\008\001\009\001\010\001\255\255\012\001\013\001\019\001\015\001\
\016\001\255\255\255\255\019\001\255\255\255\255\027\001\028\001\
\255\255\255\255\026\001\027\001\028\001\255\255\030\001\255\255\
\255\255\255\255\034\001\035\001\255\255\255\255\255\255\044\001\
\255\255\046\001\003\001\004\001\044\001\255\255\046\001\008\001\
\009\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\017\001\255\255\019\001\255\255\008\001\255\255\255\255\255\255\
\255\255\026\001\027\001\028\001\255\255\030\001\255\255\019\001\
\255\255\034\001\035\001\255\255\255\255\255\255\255\255\027\001\
\028\001\003\001\004\001\044\001\255\255\046\001\008\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\017\001\
\044\001\019\001\046\001\008\001\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\255\255\030\001\255\255\019\001\255\255\
\034\001\035\001\255\255\255\255\255\255\255\255\027\001\028\001\
\003\001\004\001\044\001\255\255\046\001\008\001\009\001\010\001\
\255\255\012\001\013\001\255\255\015\001\016\001\017\001\044\001\
\019\001\046\001\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\255\255\030\001\255\255\001\001\255\255\034\001\
\035\001\005\001\006\001\007\001\255\255\255\255\255\255\011\001\
\012\001\044\001\001\001\046\001\255\255\017\001\005\001\006\001\
\007\001\255\255\001\001\255\255\011\001\255\255\005\001\006\001\
\007\001\255\255\017\001\255\255\011\001\255\255\255\255\255\255\
\255\255\037\001\017\001\255\255\040\001\255\255\042\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\037\001\030\001\
\255\255\040\001\255\255\042\001\255\255\255\255\037\001\255\255\
\255\255\040\001\255\255\042\001"

let yynames_const = "\
  SEMI\000\
  DOT\000\
  COLON\000\
  LPAR\000\
  RPAR\000\
  COMMA\000\
  SUB\000\
  BUS\000\
  EQUAL\000\
  MINUS\000\
  ASSIGN\000\
  VBAR\000\
  ARROW\000\
  BADTOK\000\
  IMPOSSIBLE\000\
  ARRAY\000\
  BEGIN\000\
  CONST\000\
  DO\000\
  ELSE\000\
  END\000\
  IF\000\
  OF\000\
  PROC\000\
  RECORD\000\
  RETURN\000\
  THEN\000\
  TO\000\
  TYPE\000\
  LEN\000\
  VAR\000\
  WHILE\000\
  NOT\000\
  POINTER\000\
  NIL\000\
  REPEAT\000\
  UNTIL\000\
  FOR\000\
  ELSIF\000\
  CASE\000\
  "

let yynames_block = "\
  IDENT\000\
  MULOP\000\
  ADDOP\000\
  RELOP\000\
  NUMBER\000\
  CHAR\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 37 "parser.mly"
                                        ( Prog (_1, ref []) )
# 475 "parser.ml"
               : Tree.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'decl_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 40 "parser.mly"
                                        ( make_block (_1, _3) )
# 483 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                                        ( [] )
# 489 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_list) in
    Obj.repr(
# 44 "parser.mly"
                                        ( _1 @ _2 )
# 497 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'const_decls) in
    Obj.repr(
# 47 "parser.mly"
                                        ( _2 )
# 504 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decls) in
    Obj.repr(
# 48 "parser.mly"
                                        ( _2 )
# 511 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_decl) in
    Obj.repr(
# 49 "parser.mly"
                                        ( [_1] )
# 518 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_decls) in
    Obj.repr(
# 50 "parser.mly"
                                        ( [TypeDecl _2] )
# 525 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const_decl) in
    Obj.repr(
# 53 "parser.mly"
                                        ( [_1] )
# 532 "parser.ml"
               : 'const_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'const_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'const_decls) in
    Obj.repr(
# 54 "parser.mly"
                                        ( _1 :: _2 )
# 540 "parser.ml"
               : 'const_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Dict.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                                        ( ConstDecl (_1, _3) )
# 548 "parser.ml"
               : 'const_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_decl) in
    Obj.repr(
# 60 "parser.mly"
                                        ( [_1] )
# 555 "parser.ml"
               : 'type_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_decls) in
    Obj.repr(
# 61 "parser.mly"
                                        ( _1 :: _2 )
# 563 "parser.ml"
               : 'type_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Dict.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typexpr) in
    Obj.repr(
# 64 "parser.mly"
                                        ( (_1, _3) )
# 571 "parser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 67 "parser.mly"
                                        ( [_1] )
# 578 "parser.ml"
               : 'var_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decls) in
    Obj.repr(
# 68 "parser.mly"
                                        ( _1 :: _2 )
# 586 "parser.ml"
               : 'var_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ident_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typexpr) in
    Obj.repr(
# 71 "parser.mly"
                                        ( VarDecl (VarDef, _1, _3) )
# 594 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'proc_heading) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 74 "parser.mly"
                                        ( ProcDecl (_1, _3) )
# 602 "parser.ml"
               : 'proc_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'params) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'return_type) in
    Obj.repr(
# 77 "parser.mly"
                                        ( Heading (_2, _3, _4) )
# 611 "parser.ml"
               : 'proc_heading))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
                                        ( [] )
# 617 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'formal_decls) in
    Obj.repr(
# 81 "parser.mly"
                                        ( _2 )
# 624 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decl) in
    Obj.repr(
# 84 "parser.mly"
                                        ( [_1] )
# 631 "parser.ml"
               : 'formal_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decls) in
    Obj.repr(
# 85 "parser.mly"
                                        ( _1 :: _3 )
# 639 "parser.ml"
               : 'formal_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_typexpr) in
    Obj.repr(
# 88 "parser.mly"
                                               ( VarDecl (CParamDef, _1, _3) )
# 647 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ident_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'formal_typexpr) in
    Obj.repr(
# 89 "parser.mly"
                                               ( VarDecl (VParamDef, _2, _4) )
# 655 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proc_heading) in
    Obj.repr(
# 90 "parser.mly"
                                        ( PParamDecl _1 )
# 662 "parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                                        ( None )
# 668 "parser.ml"
               : 'return_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typexpr) in
    Obj.repr(
# 94 "parser.mly"
                                        ( Some _2 )
# 675 "parser.ml"
               : 'return_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 97 "parser.mly"
                                        ( seq _1 )
# 682 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 100 "parser.mly"
                                        ( [_1] )
# 689 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 101 "parser.mly"
                                        ( _1 :: _3 )
# 697 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'line) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt1) in
    Obj.repr(
# 104 "parser.mly"
                                        ( make_stmt (_2, _1) )
# 705 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                                        ( failwith "impossible" )
# 711 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                                        ( !Lexer.lineno )
# 717 "parser.ml"
               : 'line))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                                        ( Skip )
# 723 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                                        ( Assign (_1, _3) )
# 731 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actuals) in
    Obj.repr(
# 114 "parser.mly"
                                        ( ProcCall (_1, _2) )
# 739 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_opt) in
    Obj.repr(
# 115 "parser.mly"
                                        ( Return _2 )
# 746 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'elses) in
    Obj.repr(
# 116 "parser.mly"
                                        ( IfStmt (_2, _4, _5) )
# 755 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 117 "parser.mly"
                                        ( WhileStmt (_2, _4) )
# 763 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                                        ( RepeatStmt (_2, _4) )
# 771 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 120 "parser.mly"
                                        ( let v = make_expr (Variable _2) in
                                         ForStmt (v, _4, _6, _8, ref None) )
# 782 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arms) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'else_part) in
    Obj.repr(
# 122 "parser.mly"
                                        ( CaseStmt (_2, _4, _5) )
# 791 "parser.ml"
               : 'stmt1))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                                        ( make_stmt (Skip, 0) )
# 797 "parser.ml"
               : 'elses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 126 "parser.mly"
                                        ( _2 )
# 804 "parser.ml"
               : 'elses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'line) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'elses) in
    Obj.repr(
# 127 "parser.mly"
                                        ( make_stmt (IfStmt (_3,_5,_6), _2) )
# 814 "parser.ml"
               : 'elses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arm) in
    Obj.repr(
# 130 "parser.mly"
                                        ( [_1] )
# 821 "parser.ml"
               : 'arms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arms) in
    Obj.repr(
# 131 "parser.mly"
                                        ( _1 :: _3 )
# 829 "parser.ml"
               : 'arms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 134 "parser.mly"
                                        ( (_1, _3) )
# 837 "parser.ml"
               : 'arm))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                                        ( make_stmt (Skip, 0) )
# 843 "parser.ml"
               : 'else_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 138 "parser.mly"
                                        ( _2 )
# 850 "parser.ml"
               : 'else_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Dict.ident) in
    Obj.repr(
# 141 "parser.mly"
                                        ( [_1] )
# 857 "parser.ml"
               : 'ident_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Dict.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident_list) in
    Obj.repr(
# 142 "parser.mly"
                                        ( _1 :: _3 )
# 865 "parser.ml"
               : 'ident_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                                        ( None )
# 871 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                                        ( Some _1 )
# 878 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple) in
    Obj.repr(
# 149 "parser.mly"
                                        ( _1 )
# 885 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Optree.op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple) in
    Obj.repr(
# 150 "parser.mly"
                                        ( make_expr (Binop (_2, _1, _3)) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple) in
    Obj.repr(
# 151 "parser.mly"
                                        ( make_expr (Binop (Eq, _1, _3)) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 154 "parser.mly"
                                        ( _1 )
# 909 "parser.ml"
               : 'simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Optree.op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 155 "parser.mly"
                                        ( make_expr (Binop (_2, _1, _3)) )
# 918 "parser.ml"
               : 'simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 156 "parser.mly"
                                        ( make_expr (Binop (Minus, _1, _3)) )
# 926 "parser.ml"
               : 'simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 159 "parser.mly"
                                        ( _1 )
# 933 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Optree.op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 160 "parser.mly"
                                        ( make_expr (Binop (_2, _1, _3)) )
# 942 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 163 "parser.mly"
                                        ( _1 )
# 949 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 164 "parser.mly"
                                        ( const _1 integer )
# 956 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Optree.symbol * int) in
    Obj.repr(
# 165 "parser.mly"
                                        ( let (lab, len) = _1 in
                                          make_expr (String (lab, len)) )
# 964 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 167 "parser.mly"
                                        ( const (int_of_char _1) character )
# 971 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "parser.mly"
                                        ( make_expr Nil )
# 977 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actuals) in
    Obj.repr(
# 169 "parser.mly"
                                        ( make_expr (FuncCall (_1, _2)) )
# 985 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 170 "parser.mly"
                                        ( make_expr (Monop (Not, _2)) )
# 992 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 171 "parser.mly"
                                        ( make_expr (Monop (Uminus, _2)) )
# 999 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                                        ( _2 )
# 1006 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                                        ( make_expr (LenExpr (_2)))
# 1013 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "parser.mly"
                                        ( [] )
# 1019 "parser.ml"
               : 'actuals))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 177 "parser.mly"
                                        ( _2 )
# 1026 "parser.ml"
               : 'actuals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                                        ( [_1] )
# 1033 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 181 "parser.mly"
                                        ( _1 :: _3 )
# 1041 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 184 "parser.mly"
                                        ( make_expr (Variable _1) )
# 1048 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                                        ( make_expr (Sub (_1, _3)) )
# 1056 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                                        ( make_expr (Slice (_1, _3, _6)))
# 1065 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 187 "parser.mly"
                                        ( make_expr (Select (_1, _3)) )
# 1073 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    Obj.repr(
# 188 "parser.mly"
                                        ( make_expr (Deref _1) )
# 1080 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 191 "parser.mly"
                                        ( TypeName _1 )
# 1087 "parser.ml"
               : 'formal_typexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typexpr) in
    Obj.repr(
# 192 "parser.mly"
                                        ( Array (_2, _4) )
# 1095 "parser.ml"
               : 'formal_typexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typexpr) in
    Obj.repr(
# 193 "parser.mly"
                                        ( OpenArray (_3) )
# 1102 "parser.ml"
               : 'formal_typexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fields) in
    Obj.repr(
# 194 "parser.mly"
                                        ( Record _2 )
# 1109 "parser.ml"
               : 'formal_typexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pointer_typexpr) in
    Obj.repr(
# 195 "parser.mly"
                                                ( Pointer _3 )
# 1116 "parser.ml"
               : 'formal_typexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 198 "parser.mly"
                                        ( TypeName _1 )
# 1123 "parser.ml"
               : 'pointer_typexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typexpr) in
    Obj.repr(
# 199 "parser.mly"
                                        ( Array (_2, _4) )
# 1131 "parser.ml"
               : 'pointer_typexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typexpr) in
    Obj.repr(
# 200 "parser.mly"
                                        ( HeapArray (_3) )
# 1138 "parser.ml"
               : 'pointer_typexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fields) in
    Obj.repr(
# 201 "parser.mly"
                                        ( Record _2 )
# 1145 "parser.ml"
               : 'pointer_typexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pointer_typexpr) in
    Obj.repr(
# 202 "parser.mly"
                                          ( Pointer _3 )
# 1152 "parser.ml"
               : 'pointer_typexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 205 "parser.mly"
                                        ( TypeName _1 )
# 1159 "parser.ml"
               : 'typexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typexpr) in
    Obj.repr(
# 206 "parser.mly"
                                        ( Array (_2, _4) )
# 1167 "parser.ml"
               : 'typexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fields) in
    Obj.repr(
# 207 "parser.mly"
                                        ( Record _2 )
# 1174 "parser.ml"
               : 'typexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pointer_typexpr) in
    Obj.repr(
# 208 "parser.mly"
                                                ( Pointer _3 )
# 1181 "parser.ml"
               : 'typexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semi) in
    Obj.repr(
# 211 "parser.mly"
                                        ( [_1] )
# 1189 "parser.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fields) in
    Obj.repr(
# 212 "parser.mly"
                                        ( _1 :: _3 )
# 1197 "parser.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typexpr) in
    Obj.repr(
# 215 "parser.mly"
                                        ( VarDecl (FieldDef, _1, _3) )
# 1205 "parser.ml"
               : 'field_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 218 "parser.mly"
                                        ( () )
# 1211 "parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 219 "parser.mly"
                                        ( () )
# 1217 "parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Dict.ident) in
    Obj.repr(
# 222 "parser.mly"
                                        ( make_name (_1, !Lexer.lineno) )
# 1224 "parser.ml"
               : 'name))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Tree.program)
